<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="79" status="New">
<title>
[tiny] Core issues with extension status
</title>
<section><sref ref="[intro]"/></section>
<submitter>Ville Voutilainen</submitter>
<date>16 Jan 2014</date>

<discussion>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#92">92 	Should exception-specifications be part of the type system?</a> -> (SUPERSEDED) Instruct Core to close 92 as NAD. Maurer points out that he's
going to be dealing with the area with TM. The rationale for
closing is that EWG doesn't agree that being able to overload
on noexcept is worth the trouble, nor does EWG think being
able to have pointers-to-functions being different parameter
types if they have different noexcept-specifications.
-> New paper and a new EWG issue, <iref ref="169"/>.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#476">476 	Determining the buffer size for placement new</a> -> new EWG issue, <iref ref="90"/>. The EWG issue is NAD -> clarification from CWG requested.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#687">687 	template keyword with unqualified-ids</a> -> new EWG issue, <iref ref="92"/>. -> instruct CWG to reopen, Vandevoorde working on wording.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#728">728 	Restrictions on local classes</a> -> new EWG issue, <iref ref="93"/>.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#794">794 	Base-derived conversion in member type of pointer-to-member conversion</a> -> Open an EWG issue for 794, <iref ref="94"/>. Snyder reports he is interested in authoring
a paper.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#914">914 	Value-initialization of array types</a> -> Open an EWG issue for 914 and 1300, <iref ref="96"/>. Instruct Core to close either
(probably 914)as a DUP. Instruct Core not to think EWG has looked at 1300,
because EWG hasn't. Include 1326 in the EWG issue, leave that open in
Core as well.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#944">944 reinterpret_cast for all types with the same size and alignment</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1008">1008 	Querying the alignment of an object</a> -> new EWG issue, <iref ref="98"/>.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1048">1048 	auto deduction and lambda return type deduction.</a> -> Instruct Core to reopen 1048 and clarify the issue, since there
is implementation divergence. Ask Merrill whether he has implemented
what he thought was right. clang seems to be consistent. decltype(f())
is const A in gcc, decltype(b()) is A in gcc. in clang, both are
const A.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1077">1077 	Explicit specializations in non-containing namespaces</a> -> EWG has an issue for 1077. Link to the core issue from that (done), and
vice versa if CWG chair so chooses.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1300">1300 	T() for array types</a> -> Open an EWG issue for 914 and 1300, <iref ref="96"/>. Instruct Core to close either
(probably 914)as a DUP. Instruct Core not to think EWG has looked at 1300,
because EWG hasn't. Include 1326 in the EWG issue, leave that open in
Core as well.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1326">1326 	Deducing an array bound from an initializer-list</a> -> see above
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1331">1331 	const mismatch with defaulted copy constructor</a> -> Open an EWG issue for 1331, <iref ref="101"/>. Needs analysis and implementation vendor
feedback.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1393">1393 	Pack expansions in using-declarations</a> -> Open an EWG issue for 1393, <iref ref="102"/>. There are other related extension
almost-proposals that should be considered in addition to the
case in point.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1426">1426 	Allowing additional parameter types in defaulted functions</a> -> new EWG issue, <iref ref="103"/>.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1433">1433 	trailing-return-type and point of declaration</a> -> new EWG issue, <iref ref="104"/>.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1451">1451 	Objects with no linkage in non-type template arguments</a> -> new EWG issue, <iref ref="105"/>.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1463">1463 	extern "C" alias templates</a> -> new EWG issue, <iref ref="106"/>, see above about 13.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1469">1469 Omitted bound in array new-expression</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1555">1555 	Language linkage and function type compatibility</a> -> Instruct SG12 to handle 1555. (done, SG12 chair has been notified)
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1561">1561 	Aggregates with empty base classes</a> -> new EWG issue, <iref ref="108"/>.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1577">1577 	Unnecessary restrictions on partial specializations</a> -> new EWG issue, <iref ref="110"/>. -> issue is NAD, suggest CWG closes as NAD as well.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1582">1582 Template default arguments and deduction failure</a> -> new EWG issue, <iref ref="111"/>. -> EWG wishes to send this back to CWG for drafting Spicer's suggestion.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1643">1643 	Default arguments for template parameter packs</a> -> Link 1643 to EWG issue 15 (done) and vice versa.
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1826">1826 const floating-point in constant expressions</a>
</p>
<p>Straw poll, Rapperswil 2014:</p>
<p>To make it consistent by allowing "const float f = 2.0" to allow use of f in constexpr evaluation:</p>
<p>SF 4 - WF 12 - N 1 - WA 0 - SA 0</p>
<p>-> instruct CWG to reopen and resolve so that const floating point
is allowed in constant expressions.</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1790">1790 Ellipsis following function parameter pack</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1864">1864 List-initialization of array objects</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1871">1871 Non-identifier characters in ud-suffix</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1876">1876 Preventing explicit specialization</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1912">1912 exception-specification of defaulted function</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1914">1914 Duplicate standard attributes</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1915">1915 Potentially-invoked destructors in non-throwing constructors</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1923">1923 Lvalues of type void</a>
</p> 
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1931">1931 Default-constructible and copy-assignable closure types</a>
</p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1934">1934 Relaxing exception-specification compatibility requirements</a></p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1957">1957 decltype(auto) with direct-list-initialization</a></p>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#2097">2097  Lambdas and noreturn attribute</a>
</p>

</discussion>
</issue>
